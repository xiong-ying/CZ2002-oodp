package possystem;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Scanner;


/**
An invoice is created whenever payment transaction is done for order made by customer.
When order is paid, the order invoice will be printed. The invoice will be added to invoice list.
@author 	sylvia
@version 	1.0
@since		2021-11-08
*/
public class Invoice implements InvoiceCalculator {

	/**
	 * Instance Variables or Class Member properties or Data Attributes in Invoice class.
	 * Invoice ID is created with reference to "invoiceTimeStamp"+"orderID"
	 * invoiceTimeStamp indicates time when invoice is created
	 * SubtotalPrice refers to price of various items being ordered, without including Discount, GST and Service Charge.
	 * SubtotalPrice is calculated by summing up price of items, whenever items are added within an order ID.
	 * Discount is given when customer is a member. DiscountRate can be changed by changing the value of float discountRate.
	 * DiscountOfSubtotal is calculated by multiplying DiscountRate with Subtotal Price
	 * GSTOfSubtotal is calculated by multiplying GSTRate with Subtotal Price
	 * ServiceChargeOfSubtotal is calculated by multiplying ServiceChargeRate with Subtotal Price
	 */
	
	private int orderID;
	private String invoiceID;
	private String invoiceTimeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

	private String invoiceIDTimeStamp = new SimpleDateFormat("yyMMHHmm").format(new Date());
	
	Scanner sc= new Scanner(System.in);    
	
	private float subtotalPrice;
	private float discountOfSubtotal;
	private float GSTOfSubtotal;
	private float serviceChargeOfSubtotal;
	private float totalPrice;
	
	/**
	float discountRate = (float) 0.10;
	float GSTRate = (float) 0.07;
	float serviceChargeRate = (float) 0.10;
	*/
	float discountRate = (float) 0.10;
	
	String menuName;
		
	/**
	 * Create a class constructor for Invoice Class.
	 * Constructor of Invoice Class is used for initializing object data or construct object. 
	 * @param invoiceID
	 * @param invoiceTimeStamp
	 * @param orderID
	*/        
	
	public Invoice(String invoiceID, String invoiceTimeStamp, int orderID) { 
			this.invoiceID = invoiceID;                                                                                           
			this.invoiceTimeStamp = invoiceTimeStamp;                                                                                                                                                                      
		}                                                                                                         	

	public Invoice(String invoiceID, String invoiceTimeStamp, float subtotalPrice,
			float discountOfSubtotal, float gSTOfSubtotal, float serviceChargeOfSubtotal, float totalPrice,int orderID) {
		this.invoiceID = invoiceID;
		this.invoiceTimeStamp = invoiceTimeStamp;
		this.subtotalPrice = subtotalPrice;
		this.discountOfSubtotal = discountOfSubtotal;
		GSTOfSubtotal = gSTOfSubtotal;
		this.serviceChargeOfSubtotal = serviceChargeOfSubtotal;
		this.totalPrice = totalPrice;
		this.orderID = orderID;
	}

	public Invoice() {
	}

	/**
	 * InvoiceID is generated by combining "invoiceTimeStampyymmddhhmm" + "OrderID"  
	 */         
	public String invoiceID(int orderID) {
		 invoiceID = invoiceIDTimeStamp + ""+ orderID;	
		return invoiceID;	
	}
	
	
	/**
	 * Invoice object is generated by referring to order object in Order Class. 
	 * Order object contain information, such as ID, timeStamp, serverID, tableNumber, Pax, Membership status and payment status.
	 * When payment is made, Invoice will be generated.
	 * When Invoice object is generated, calculatePrice method will be called from order object (to calculate Subtotal by summing up price of all itmes ordered).
	 * When Invoice object is generated, new invoicePrinterMessage object will be created, with parameter value based on invoiceTimeStamp and order object. 
	 */   
	public void generateInvoice(Order obj_order) {
		String invoiceID = invoiceID(obj_order.getID());
		calculatePrice(obj_order);	
		InvoicePrinterMessage invoicePrinter = new InvoicePrinterMessage();
		invoicePrinter.printInvoice(invoiceTimeStamp,obj_order);
		this.orderID = obj_order.getID();
	}

	
	/**
	 * Calculate subtotalPrice, DiscountOfSubtotal, GSTOfSubtotal, serviceChargeOfSubtotal and totalPrice of items being ordered in specific orderID.  
	 * Calculate subtotalPrice by adding up price of items being ordered, by referring to menuItem from Order object.
	 */     
	
	public float calculatePrice(Order obj_order) {
		int orderID = obj_order.getID();
	
		for(MenuItem menuItem :obj_order.getMenuList()) {
			subtotalPrice += menuItem.getPrice();
		}	
		
		for(PromoItem promoItem :obj_order.getPromoList()) {
			subtotalPrice += promoItem.getPrice();
		}
	
		if(obj_order.getIsMember()==true) {
			discountRate= getDiscountRate();
			}
			else {
				discountRate=0;
		}
	
		discountOfSubtotal = calculateDiscountOfSubtotal(discountRate, subtotalPrice);
		GSTOfSubtotal = calculateGSTOfSubtotal(GSTRate, subtotalPrice);
		serviceChargeOfSubtotal = calculateServiceChargeOfSubtotal(serviceChargeRate, subtotalPrice);
		totalPrice = calculateTotalPrice(subtotalPrice , discountOfSubtotal , GSTOfSubtotal , serviceChargeOfSubtotal);
		
		obj_order.getInvoiceObj().setDiscountOfSubtotal(discountOfSubtotal);
		obj_order.getInvoiceObj().setGSTOfSubtotal(GSTOfSubtotal);
		obj_order.getInvoiceObj().setServiceChargeOfSubtotal(serviceChargeOfSubtotal);
		obj_order.getInvoiceObj().setTotalPrice(totalPrice);
		return totalPrice;
	
	}

	 /**
	 * Calculate DiscountOfSubtotal, GSTOfSubtotal, serviceChargeOfSubtotal and totalPrice of items being ordered in specific orderID.  
	 */ 
	 
	public float calculateDiscountOfSubtotal(float discountRatePer, float subtotalPrice) {
		float discountOfSubtotal = discountRatePer* subtotalPrice;
		return discountOfSubtotal;
	}
	
	public float calculateGSTOfSubtotal(float GSTRate, float subtotalPrice) {
		float GSTOfSubtotal = GSTRate*subtotalPrice;
		return GSTOfSubtotal;
	}
	
	public float calculateServiceChargeOfSubtotal(float serviceChargeRate, float subtotalPrice) {
		float serviceChargeOfSubtotal = serviceChargeRate*subtotalPrice;
		return serviceChargeOfSubtotal;
	}
	
	public float calculateTotalPrice(float subtotalPrice, float discountOfSubtotal, float GSTOfSubtotal, float serviceChargeOfSubtotal) {
		float totalPrice = subtotalPrice - discountOfSubtotal + GSTOfSubtotal + serviceChargeOfSubtotal;
		return totalPrice;
	}

	
	 /**
	 * Getter and Setter in Invoice Class.
	 */ 
	public float getSubtotalPrice() {
		return subtotalPrice;
	}

	public void setSubtotalPrice(float subtotalPrice) {
		this.subtotalPrice = subtotalPrice;
	}

	public float getDiscountRate() {
		return discountRate;
	}

	public void setDiscountRate(float discountRate) {
		this.discountRate = discountRate;
	}
	
	public float getDiscountOfSubtotal() {
		return discountOfSubtotal;
	}

	public void setDiscountOfSubtotal(float discountOfSubtotal) {
		this.discountOfSubtotal = discountOfSubtotal;
	}

	public float getGSTOfSubtotal() {
		return GSTOfSubtotal;
	}

	public void setGSTOfSubtotal(float gSTOfSubtotal) {
		GSTOfSubtotal = gSTOfSubtotal;
	}

	public float getServiceChargeOfSubtotal() {
		return serviceChargeOfSubtotal;
	}

	public void setServiceChargeOfSubtotal(float serviceChargeOfSubtotal) {
		this.serviceChargeOfSubtotal = serviceChargeOfSubtotal;
	}

	public float getTotalPrice() {
		return totalPrice;
	}

	public void setTotalPrice(float totalPrice) {
		this.totalPrice = totalPrice;
	}

	/**
	 * @return the invoiceTimeStamp
	 */
	public String getInvoiceTimeStamp() {
		return invoiceTimeStamp;
	}
	
	/**
	 * @return the orderID
	 */
	public int getOrderID() {
		return orderID;
	}

	
}
